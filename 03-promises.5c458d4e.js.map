{"mappings":"iiBAiDA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAChCC,EAAQF,SAASC,cAAc,uBAC/BE,EAAOH,SAASC,cAAc,sBAC9BG,EAASJ,SAASC,cAAc,wBAIpC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC/BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUQ,MAAAP,IAGpBG,EAAO,CAAEJ,WAAUQ,MAAAP,MAEpBA,MAbHR,EAAKgB,iBAAiB,UAiBtB,SAAsBC,GAQpB,GAPAA,EAAEC,iBACFf,EAAQgB,OAAOF,EAAEG,cAAcL,MAAMM,OACrCC,QAAQC,IAAIpB,GACZC,EAAOe,OAAOF,EAAEG,cAAcI,KAAKH,OACnCC,QAAQC,IAAInB,GACZC,EAASc,OAAOF,EAAEG,cAAcK,OAAOJ,OACvCC,QAAQC,IAAIlB,GACRF,GAAS,GAAKC,GAAQ,GAAKC,EAAS,EACtC,IAAK,IAAIqB,EAAW,EAAGA,GAAYrB,EAAQqB,GAAY,EAErDpB,EAAcoB,EADdvB,GAASC,GAEZuB,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUsB,EAAKD,EAALb,MACjBe,EAAAhC,GAASiC,OAAOC,QAChB,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANJ,EAAM,OAC5CP,QAAMC,IAAI,uBAAwCU,OAAf1B,EAAS,QAAY0B,OAANJ,EAAM,UAE3DK,OAAM,SAAAN,G,IAAGrB,EAAQqB,EAARrB,SAAU4B,EAAKP,EAALb,MAClBe,EAAAhC,GAASiC,OAAOK,QAChB,sBAAuCH,OAAf1B,EAAS,QAAY0B,OAANE,EAAM,OAC3Cb,QAAMC,IAAI,sBAAqCU,OAAf1B,EAAS,QAAY0B,OAANE,EAAM,eAEvDL,EAAAhC,GAASiC,OAAOM,QAAQ,8B","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nlet delay = document.querySelector('input[name=\"delay\"]');\nlet step = document.querySelector('input[name=\"step\"]');\nlet amount = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\nsetTimeout(() => {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    resolve({ position, delay });\n  } else {\n    // Reject\n    reject({ position, delay });\n  }\n}, delay)})\n};\n  \n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n  delay = Number(e.currentTarget.delay.value);\n  console.log(delay)\n  step = Number(e.currentTarget.step.value);\n  console.log(step)\n  amount = Number(e.currentTarget.amount.value);\n  console.log(amount)\n  if (delay >= 0 && step >= 0 && amount > 0) {\n    for (let position = 1; position <= amount; position += 1) {\n      delay += step;\n      createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(\n    `✅ Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(\n    `❌ Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n  }) } } else {\n    Notiflix.Notify.warning('Memento te hominem esse');} \n  }"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","setTimeout","Math","random","delay","addEventListener","e","preventDefault","Number","currentTarget","value","console","log","step","amount","position1","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","warning"],"version":3,"file":"03-promises.5c458d4e.js.map"}